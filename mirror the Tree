/** 
 Changes the tree into its mirror image.

 So the tree... 
       4 
      / \ 
     2   5 
    / \ 
   1   3

 is changed to... 
       4 
      / \ 
     5   2 
        / \ 
       3   1

 Uses a recursive helper that recurs over the tree, 
 swapping the left/right pointers. 
*/ 
public void mirror() { 
  mirror(root); 
}

private void mirror(Node node) { 
  if (node != null) { 
    // do the sub-trees 
    mirror(node.left); 
    mirror(node.right);

    // swap the left/right pointers 
    Node temp = node.left; 
    node.left = node.right; 
    node.right = temp; 
  } 
} 


The above method can also be written as: (PLEASE FOLLOW THIS METHOD. EASY AND DONE BY MYSELF)
public Node mirror(Node n){

	if(n==null)   // node does not exist
		return n;
		
	if(n.lchild!=null)  // left child present
		mirror(n.lchild);
		
	if(n.rchild!=null)  // rignt child present
		mirror(n.rchild);
	
	Node temp=n.lchild;  // swap left and right
	n.lchild=n.rchild;
	n.rchild=temp;
	
	return n;
}
