See the 2nd answer
Source: http://www.geeksforgeeks.org/program-nth-catalan-number/
Source: http://stackoverflow.com/questions/3042412/with-n-no-of-nodes-how-many-different-binary-and-binary-search-trees-possib
Youtube Source: https://www.youtube.com/watch?v=SIXAYLoKLc8

public int countBST(int nodes){
	int totalTrees=0;
	if(nodes==0||nodes==1)
		return 1;
	else{
		for(int k=0;k<nodes;k++){         // iterate from 0 to (n-1)
			int leftTree=countBST(k);
			int rightTree=countBST(nodes-k-1);
			totalTrees += leftTree*rightTree;   // add the previous results
			// The above 3 lines can also be replaced with a single line
			// totalTrees += countBST(k)*countBST(nodes-k-1);
		}
	}
	return totalTrees;
}

Time complexity of above implementation is equivalent to nth catalan number.

 T(n) =  summation(n-1 to 0) {T(i)*T(n-i)}   for n>=0;

The value of nth catalan number is exponential that makes the time complexity exponential.
