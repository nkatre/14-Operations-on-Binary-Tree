/** Here in this method, we traverse from the ROOT right upto the LEAF.
 Given a tree and a sum, returns true if there is a path from the root 
 down to a leaf, such that adding up all the values along the path 
 equals the given sum.
 Strategy: subtract the node value from the sum when recurring down, 
 and check to see if the sum is 0 when you run out of tree. 
*/ 


public boolean hasPathSum(int sum) { 
 return( hasPathSum(root, sum) ); 
}

boolean hasPathSum(Node node, int sum) { 
  // return true if we run out of tree and sum==0 
  if (node == null) 
      return(sum == 0); 
 
  else { 
  // otherwise check both subtrees 
    int subSum = sum - node.data;   // Very Important Calculation. This is the main stratergy to solve this problem
    
    boolean ltree=hasPathSum(node.left, subSum);
    boolean rtree=hasPathSum(node.right, subSum);
    
    return (ltree||rtree);   // Even if one of them is true then return true.
  } 
} 
