 
/* 
 Background: The below explanation is for the problem that I encountered while passing complex datatype such as array,
 between two PHP pages using POST method. The same explanation does apply to other complex datatypes as well, 
 such as in this case, a binary tree.

Source of Explanation: http://www.tuxradar.com/practicalphp/5/11/0
As arrays are complex data types, you cannot see their contents directly. 
If you try printing out the value of an array, you will see PHP just outputs "Array", 
which means that passing the value of an array through a link requires a lot of work. 
Luckily, PHP comes to the rescue with four functions
that do all the hard work for you: serialize(), unserialize(), urlencode(), and urldecode().

Serialize() converts an array, given as its only parameter, 
into a normal string that you can save in a file, pass in a URL, etc. 
Unserialize() is the opposite of serialize() - it takes a serialize()d string and converts it back to an array.

Urlencode() and urldecode() also work in tandem, and convert the string that is 
sent to them as their only parameter into a version that is safe to be passed across the web. 
All characters that aren't letters and numbers get converted into web-safe codes that can be 
converted back into the original text using urldecode().

Passing arrays across pages is best done using urlencode() and urldecode(), 
however you should consider using them both on any data you pass across the web, just
to make sure there are no incompatible characters in there. 

Solution for passing arrays through POST method between PHP pages: Solution: http://stackoverflow.com/questions/14071587/php-pass-array-through-post
Another solution using SESSION VARIABLE: http://stackoverflow.com/questions/10260720/pass-array-between-two-php-files
For Example: Using Session Variable
On the sending page: 
<?php
session_start();  // start a session
$column_headers = array("A","B","C","D");   // create array
$_SESSION['column_headers']=$column_headers; // store in session variable
?>

On the receiving page:
<?php
session_start(); // start session to retrieve the session variable
$column_headers=$_SESSION['column_headers']; // retrieve the session varaible
?>
*/
 
 /**Given a binary tree, serialize it into a string. In other words, generate a string
 representation of the tree such that you can uniquely construct the tree back from the string alone.
package SerializeAndDesirializeBST;

package SerializeAndDesirializeBST;

import java.util.LinkedList;
import java.util.Queue;

public class UsingQueue {
	public static void main(String[] args) {
	BST tree = BinSearchTree.createTree();
	tree.display(tree.root);
	System.out.println();
	String treeString = serialize(tree.root);
	Node deserializedRoot = deserialize(treeString);
	tree.display(deserializedRoot);
	System.out.println();
	}


	private static String serialize(Node root) {
		StringBuilder sb = new StringBuilder();
		serialize(sb,root);
		return sb.toString().trim();
	}

	private static void serialize(StringBuilder sb, Node node) {
		if(node==null)
			return;
		
		sb.append(node.data);
		sb.append(" ");
		
		  if (node.lchild != null) {
              serialize(sb, node.lchild);
      }
      else {
              sb.append("NULL");
              sb.append(" ");
      }
      
      if (node.rchild != null) {
              serialize(sb, node.rchild);
      }
      else {
              sb.append("NULL");
              sb.append(" ");
      }
	}
	 public static Node deserialize(String str) {
         if (str == null || str.isEmpty()) {
                 return null;
         }
         String[] data = str.split(" ");
         Queue<Node> q = new LinkedList<Node>();
         
         //System.out.println(Arrays.toString(data));

         for(String s : data) {
                
                 if (s.equals("NULL")) {
                         q.add(null);
                 } else {
                         q.add(new Node(Integer.parseInt(s)));
                 }
         }
         Node root = deserialize(q, q.remove());
         return root;
 }
	 private static Node deserialize(Queue<Node> q, Node node) {
         if (node == null) {
                 return null;
         }
         node.lchild = deserialize(q, q.remove());
         node.rchild= deserialize(q, q.remove());
         
         return node;
 }
}
class Node{
	public int data;
	public Node lchild;
	public Node rchild;
	
	public Node(int data) {
	this.data=data;
	lchild=null;
	rchild=null;
	}
}

class BST {
public Node root=null;

	public void addNode(Node n){
		if(root==null)
		{
			root=n;
			System.out.println(n.data+" added as the root to the tree");
		}
		else{
			
			Node current=root;
			Node parent;
			while(true){
				parent=current;
				
				if(n.data<current.data){
					current=current.lchild;
					if(current==null){
						parent.lchild=n;
						return;
					}
				}
				else{
					current=current.rchild;
					if(current==null){
						parent.rchild=n;
						return;
					}
				}
				
			}
		}
		
	}
	public void display(Node n){
		Node tempNode=n;
		if(tempNode==null)
			return;
		else{
			
		    display(tempNode.lchild);
			System.out.print(tempNode.data+" ");
			display(tempNode.rchild);
			
		}
	}
}
class BinSearchTree{
	
	public static BST createTree() {
		BST myTree=new BST();
		System.out.println("Adding the elemets");
		myTree.addNode(new Node(40));
		myTree.addNode(new Node(50));
		myTree.addNode(new Node(30));
		myTree.addNode(new Node(80));
		myTree.addNode(new Node(20));
		myTree.addNode(new Node(10));
		myTree.addNode(new Node(5));
		myTree.addNode(new Node(85));
		myTree.addNode(new Node(35));
		myTree.addNode(new Node(45));
		myTree.addNode(new Node(32));
		myTree.addNode(new Node(15));
		myTree.addNode(new Node(38));
		myTree.addNode(new Node(36));
		return myTree;
		
	}
}
