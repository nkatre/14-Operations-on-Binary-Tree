	private static void printNodesFromRootToLeaf(BST bst) {
		printNodesFromRootToLeafAlgorithm(bst.root,new ArrayList<Integer>());
	}

	private static void printNodesFromRootToLeafAlgorithm(Node node, ArrayList<Integer> list) {
		/*
		 * Source: http://codereview.stackexchange.com/questions/63921/print-all-nodes-from-root-to-leaves
		 */
		if(node==null)
			return;
		
		list.add(node.data);
		
		if (node.lchild == null && node.rchild == null) {
		    System.out.println(list);
		} 
		else {   // Since we are using List and not Stack, hence we should go first LEFT and then RIGHT
			
			/*
			 * MOST IMP is "new ArrayList<Integer>(list)" the constructor used is "ArrayList<Integer>(list)"
			 * which is a parameterized constructor and we have NOT USED default constructor
			 * This parameterized constructor constructs a list containing the elements of the specified collection,
			 * in the order they are returned by the collection's iterator.
			 */
			printNodesFromRootToLeafAlgorithm(node.lchild, new ArrayList<Integer>(list)); 
			printNodesFromRootToLeafAlgorithm(node.rchild, new ArrayList<Integer>(list));
		}

	}
/*
 * Analysis:
 * Time Complexity = O(n)
 * Space Complexity = O(lgn) where lgn is the longest possible path in the BST
 */
