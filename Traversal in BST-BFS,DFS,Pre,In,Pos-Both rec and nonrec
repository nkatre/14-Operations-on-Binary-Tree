
BEST Source for ITERATIVE TRAVERSALS ANSWERS:
http://www.algorithmsandme.com/2014/02/tree-traversal-without-recursion-using.html#.VOpYVp_0_VM


***************************************** DFS and BFS in BST *****************************************

Question: ITERATIVE BFS and  ITERATIVE DFS Traversals of the tree 
Solution:
private static void bfs(BST bst) {      // BEST method for BFS Traversal
	// Similar to the method which prints nodes at every level of the BST
	Queue<Node> queue = new LinkedList<Node>();
	queue.add(bst.root);
	while(!queue.isEmpty()){
		Node n = queue.poll();
		System.out.print(n.data+" ");
		if(n.lchild!=null)
			queue.add(n.lchild);
		if(n.rchild!=null)
			queue.add(n.rchild);
	}
	System.out.println();
}
 
private static void dfs(BST bst) {     // BEST method for DFS Traversal
	Stack<Node> stack = new Stack<Node>();
	stack.push(bst.root);
	while(!stack.isEmpty()){
		Node n = stack.pop();
		System.out.print(n.data+" ");
		if(n.rchild!=null)//First insert the RCHILD into STACK, reason being, the tree will be printed from LEFT TO RIGHT
// However, even if LCHILD into STACK is inserted first, it is NOT worng, just that the tree will be printed from RIGHT TO LEFT
			stack.push(n.rchild);
		if(n.lchild!=null)  // Then insert LCHILD
			stack.push(n.lchild);
	}
	System.out.println();
}

************************************ End of DFS and BFS in BST **************************************

***************************** DFS and BFS in Adjacency Matrix(or Graph) *****************************
/*
Source: https://github.com/nkatre/codejam/blob/master/java/src/utilities/search/BFS_DFS.java
*/
package DFSAndBFSInAdjacencyMatrixORGraph;

import java.util.*;

public class UsingStackAndQueue
{
    private static int[][] adjacencyMatrix;
    private static boolean[] visited;

    public static void main(String[] args)
    {
        int numNodes = 6;
        adjacencyMatrix = new int[numNodes][numNodes];
        visited = new boolean[numNodes];

        adjacencyMatrix[0][1] = 1;
        adjacencyMatrix[0][2] = 1;
        adjacencyMatrix[0][3] = 1;
        adjacencyMatrix[1][0] = 1;
        adjacencyMatrix[1][4] = 1;
        adjacencyMatrix[1][5] = 1;
        adjacencyMatrix[2][0] = 1;
        adjacencyMatrix[2][5] = 1;
        adjacencyMatrix[3][0] = 1;
        adjacencyMatrix[4][1] = 1;
        adjacencyMatrix[5][1] = 1;
        adjacencyMatrix[5][2] = 1;
        System.out.println("Undirected Graph Adj Matrix:");
        for (int i = 0; i < adjacencyMatrix.length; i++) {
            System.out.println(Arrays.toString(adjacencyMatrix[i]));
        }

        System.out.println("DFS");
        dfs(0);

        System.out.println("BFS");
        bfs(0);
        
        
    }

    // Step 1: Push the root node in the Stack.
    // Step 2: Loop until stack is empty.
    // Step 3: Peek the node of the stack.
    // Step 4: If the node has unvisited child nodes, get the unvisited child
    // node, mark it as traversed and push it on stack.
    // Step 5: If the node does not have any unvisited child nodes, pop the node
    // from the stack.
    public static void dfs(int rootNode)
    {
        Stack<Integer> s = new Stack<Integer>();
        s.push(rootNode);                             // push
        visited[rootNode] = true;                     // visit
        printNode(rootNode);                          // print
        while (!s.isEmpty()) {
            int n = s.peek();   // Please NOTE this is peek() [NOT pop()]
            int child = -1;
            if ((child = getUnvisitedChildNode(n)) != -1)  {
                s.push(child);                             // push
                visited[child] = true;                     // visit              
                printNode(child);                          // print
            } else {  // If the node does not have any unvisited child nodes, pop the node
                s.pop();
            }
        }
        // Clear visited property of nodes
        clearAllVisited();
    }

    // Step 1: Push the root node in the Queue.
    // Step 2: Loop until the queue is empty.
    // Step 3: Remove the node from the Queue.
    // Step 4: If the removed node has unvisited child nodes, mark them as
    // visited and insert the unvisited children in the queue.
    public static void bfs(int rootNode)
    {
        // BFS uses Queue data structure
        Queue<Integer> q = new LinkedList<Integer>();
        q.add(rootNode);                              // push
        visited[rootNode] = true;                     // visit              
        printNode(rootNode);                          // print
        while (!q.isEmpty()) {
            int n = q.remove();
            int child = -1;
            while ((child = getUnvisitedChildNode(n)) != -1) {
                q.add(child);                              // push
                visited[child] = true;                     // visit              
                printNode(child);                          // print
            }
        }
        // Clear visited property of nodes
        clearAllVisited();
    }

    private static void clearAllVisited()
    {
        for (int i = 0; i < visited.length; i++) {
            visited[i] = false;
        }
    }

    /**
     * walks through adjacency matrix to find
     * edges from this node 'n' to neighbouring
     * nodes which have not yet been visited
     * 
     * returns -1 if none found, ie. all visited/
     * no outgoing edges
     * 
     * @param n
     * @return
     */
    private static int getUnvisitedChildNode(int n)
    {
        // visit all columns for row n
        for (int i = 0; i < adjacencyMatrix[n].length; i++) {
            if (adjacencyMatrix[n][i] == 1 && !visited[i]) {
                return i;
            }
        }
        return -1;
    }

    private static void printNode(int node)
    {
        System.out.println("visited node: " + (char) (node + 'A'));
    }
   
}
/*
Analysis(For both DFS and BFS):
Source: http://stackoverflow.com/questions/11468621/why-is-the-time-complexity-of-both-dfs-and-bfs-o-v-e
	Time Complexity = O(n+e) where n=nodes, e=edges
	Space Complexity = O(n) + O(n) = O(2n)   where,
	first O(n) is used to store nodes [which is used either for Stack(dfs) OR Queue(bfs)]
	second O(n) is used to store the visited nodes array of size n where n=nodes
*/



**************************************End of DFS and BFS in Adjacency Matrix(or Graph) *********************

Recursion: Always remember that recursion is calling the method again and again STACKWISE(It works similar to STACK operations)
Recursion works on STACK FRAMES. It works similar to STACK operations.

Question: RECURSIVE DFS Traversal of the tree 
Solution:

  // Global Variable for DFS
  	public static Stack<TreeNode> stack = new Stack<TreeNode>();
  	

  public static void recursiveDFS(TreeNode root) {   // Recursive DFS Program
	if(root == null)
		return;
	
	stack.push(root);
	System.out.print(root.data+" ");
    if(root.left!=null)
    	recursiveDFS(root.left);
    if(root.right!=null)
    	recursiveDFS(root.right);
    
    stack.pop();
}
  
  
 Question: Recursive BFS Tree Traversal
 Solution:
 Source: http://stackoverflow.com/questions/2549541/performing-breadth-first-search-recursively
 
(I'm assuming that this is just some kind of thought exercise, or even a trick homework/interview question, 
but I suppose I could imagine some bizarre scenario where you're not allowed any heap space for some reason
[some really bad custom memory manager? some bizarre runtime/OS issues?] while you still have access to the stack...)

Breadth-first traversal traditionally uses a queue, not a stack. The nature of a queue and a stack are pretty much opposite, 
so trying to use the call stack (which is a stack, hence the name) as the auxiliary storage (a queue) is pretty much doomed
to failure, unless you're doing something stupidly ridiculous with the call stack that you shouldn't be.

On the same token, the nature of any non-tail recursion you try to implement is essentially adding a stack to the algorithm.
This makes it no longer breadth first search on a binary tree, and thus the run-time and whatnot for traditional 
BFS no longer completely apply. Of course, you can always trivially turn any loop into a recursive call, but that's
not any sort of meaningful recursion.

However, there are ways, as demonstrated by others, to implement something that follows the semantics of BFS at some cost. 
If the cost of comparison is expensive but node traversal is cheap, then as @Simon Buchan did, you can simply run an 
iterative depth-first search, only processing the leaves. This would mean no growing queue stored in the heap, 
just a local depth variable, and stacks being built up over and over on the call stack as the tree is traversed 
over and over again. And as @Patrick noted, a binary tree backed by an array is typically stored in breadth-first 
traversal order anyway, so a breadth-first search on that would be trivial, also without needing an auxiliary queue.
  
  
  /**
         * Performs the operation first on the node itself, then on its left descendants, and
         * finally on its right descendants. In other words, a node is always visited before any of its
         * children.
         * (self -> go down left -> go down right)
         */
        public void preorderTraversal () {
                preorderTraversal(root);
                System.out.println();
        }
        
        private void preorderTraversal(Node node) {
                if (node == null) {
                        return;
                }
                
                System.out.print(node.key + " ");
                preorderTraversal(node.left);
                preorderTraversal(node.right);
        }
        
        /**
         * Sometimes recursive algorithms can be replaced with iterative algorithms that accomplish the same
         * task in a fundamentally different manner using different data structures.
         * Because recursion is so intrinsic to the definition of a preorder traversal, you may have trouble finding
         * an entirely different iterative algorithm to use in place of the recursive algorithm. 
         * In such a case, the best course of action is to understand what is happening in the recursion 
         * and try to emulate the process iteratively.
         */
        public void preorderNoRecursionTraveral() {
                if (root == null) {
                        return;
                }
                
                Stack<Node> stack = new Stack<BinarySearchTree.Node>();
                stack.push(root);
                while (!stack.isEmpty()) {
                        Node node = stack.pop();
                        System.out.print(node.key + " ");
                        
                        if(node.right != null) {
                                stack.push(node.right);
                        }
                        if(node.left != null) {
                                stack.push(node.left);
                        }
                }
                System.out.println();
        }
        
        
        /**
         * Performs the operation first on the node�s left descendants, then on the node
         * itself, and finally on its right descendants. 
         * In other words, the left subtree is visited first,
         * then the node itself, and then the node�s right subtree.
         * (go down left -> self -> go down right)
         */
        public void inorderTraversal() {
                inorderTraversal(root);
                System.out.println();
        }
        
        private void inorderTraversal(Node node) {
                if (node == null) {
                        return;
                }
                inorderTraversal(node.left);
                System.out.print(node.key + " ");
                inorderTraversal(node.right);
        }
        
       
	public static void inorder(Node root){
		Node temp = root;
		if(temp==null)
			return;
		
		// The reason why we use Stack is because Stack can resemble recursive calls
		Stack<Node> s = new Stack<Node>();
		while(!s.isEmpty() || temp!=null){
			
			if(temp!=null){
				s.push(temp);
				temp=temp.lchild;
			}
			else{
				temp=s.pop();  // trace the previous node
				System.out.print(temp.data + " ");
				temp=temp.rchild;
			}
			
		}
		System.out.println();
	}
/*
 * Analysis:
 * Time Complexity = O(n)
 * Space Complexity = O(n)
 */
        
        /**
         * 
         * Performs the operation first on the node�s left descendants, then on the node�s
         * right descendants, and finally on the node itself. In other words, a node is always visited
         * after all its children.
         * (go down left -> go down right -> self)
         */
        public void postorderTraversal() {
                postorderTraversal(root);
                System.out.println();
        }
        
        private void postorderTraversal(Node node) {
                if (node == null) {
                        return;
                }
                
                postorderTraversal(node.left);
                postorderTraversal(node.right);
                System.out.print(node.key + " ");
        }

        public void postorderTraversalNoRecursion() {
                if (root == null) {
                        return;
                }
                Stack<Node> stack = new Stack<BinarySearchTree.Node>();
                Node head = root;
                stack.push(head);

                while (!stack.isEmpty()) {
                        Node next = stack.peek();
                        if (next.right == head || next.left == head
                                        || (next.left == null && next.right == null)) {
                                stack.pop();
                                System.out.print(next.key + " ");
                                head = next;
                        } else {
                                if (next.right != null) {
                                        stack.push(next.right);
                                }
                                if (next.left != null) {
                                        stack.push(next.left);
                                }
                        }
                }
                System.out.println();
        }
