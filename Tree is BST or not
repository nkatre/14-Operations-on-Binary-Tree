//CODE TESTED: IT WORKED. Time Complexity = O(n) and Space Complexity = O(1) ------> MOST Efficient
  public static boolean isBSTUtil(TreeNode root, int min, int max) {
	if (root==null)
		return true;
	if(root.data<min || root.data>max)
		return false;
	return (isBSTUtil(root.left, min, root.data)&&(isBSTUtil(root.right, root.data, max)));
} 
// Helper functions for getting minimum value and maximum value in BST
public static int getMinValueInBST(TreeNode node){
	
	if(node==null)
		return -1;  // Or Integer.MIN_VALUE
	TreeNode prev=null;
	while(node!=null){
		prev=node;
		node=node.left;
	}
	if(prev!=null)
		return prev.data;
	else
		return node.data;
}
public static int getMaxValueInBST(TreeNode node){
	
	if(node==null)  
		return -1;   //Or Integer.MAX_VALUE
	TreeNode prev=null;
	while(node!=null){
		prev=node;
		node=node.right;
	}
	if(prev!=null)
		return prev.data;
	else
		return node.data;
}
// OTHER METHOD IS USING ARRAYLIST AS MENTIONED BELOW.Time Complexity O(n) and Space Complexity O(n) ----> NOT AS EFFICIENT AS PREVIOUS METHOD

/* Using Inorder and auxilary array to check whether a tree is a BST.
Time Complexity O(n) and Space Complexity O(n) */

public ArrayList<Integer> array=new ArrayList<Integer>();

/* array is a global variable of type ArrayList<E> */

public static void isBST(TreeNode root) {

	modifiedInorder(root);
	int count=0;
	
	for(int i=0;i<array.size()-1;i++){
		
		if(array.get(i)<array.get(i+1))
			count++;
	}
	if(count==array.size()-1)
	System.out.println("Tree is BST");
	else
		System.out.println("Tree Not BST");
	array.clear();
}
public static void modifiedInorder(TreeNode root) {
	if(root==null)
		return;
	
	modifiedInorder(root.left);
	array.add(root.data);
	modifiedInorder(root.right);	
}


