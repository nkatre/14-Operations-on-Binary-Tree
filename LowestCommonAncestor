 
 /* Recursive Solution. Worst Case Time Complexity is O(n) */
 
 public Node LCA(Node rootNode, Node p, Node q) {
         if (rootNode == null || p == null || q == null)
                 return null;
         if (Math.max(p.data, q.data) < rootNode.data)
                 return LCA(rootNode.lchild, p, q);
         if (Math.min(p.data, q.data) > rootNode.data)
                 return LCA(rootNode.rchild, p, q);
         return rootNode;
 }


Iterative Solution:
The inorder traversal yields - 8, 4, 9, 2, 5, 1, 6, 3, 7

And the postorder traversal yields - 8, 9, 4, 5, 2, 6, 7, 3, 1

So for instance, if we want to find the common ancestor of nodes 8 and 5, then we make a list of all the nodes which are between 8 and 5 in the inorder tree traversal, which in this case happens to be [4, 9, 2]. Then we check which node in this list appears last in the postorder traversal, which is 2. Hence the common ancestor for 8 and 5 is 2.

The complexity for this algorithm is O(n)
