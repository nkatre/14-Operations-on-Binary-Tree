/*
	Diameter of a tree: The diameter of a tree is defined as the number of nodes between the extreme lchild node
	and the extreme rchild node of a tree
	Source: http://www.geeksforgeeks.org/diameter-of-a-binary-tree/
	*/
		
	
	// BEST SOLUTION FOR diameter   -> Time Complexity = O(n), Space Complexity = O(1)
	int diameterOpt(Node root, int height)
	{
	  /* lh --> Height of lchild subtree
	     rh --> Height of rchild subtree */
	  int lh = 0, rh = 0;
	  
	  /* ldiameter  --> diameter of lchild subtree
	     rdiameter  --> Diameter of rchild subtree */
	  int ldiameter = 0, rdiameter = 0;
	  
	  if(root == null)
	  {
	     height = 0;
	     return 0; /* diameter is also 0 */
	  }
	  
	  /* Get the heights of lchild and rchild subtrees in lh and rh
	    And store the returned values in ldiameter and ldiameter */
	  ldiameter = diameterOpt(root.lchild, lh);
	  rdiameter = diameterOpt(root.rchild, rh);
	  
	  /* Height of current node is max of heights of lchild and
	     rchild subtrees plus 1*/
	  height = Math.max(lh, rh) + 1;
	  
	  return Math.max(lh + rh + 1, Math.max(ldiameter, rdiameter));
	}
	/*
	Time Complexity: O(n)
	Space Complexity: O(1)
	*/
	
	/* Function to get diameter of a binary tree Time Complexity = O(n^2), Space Complexity = O(1)*/
	int diameter(Node root)
	{
	   /* base case where tree is empty */
	   if (root == null)
	     return 0;
	 
	  /* get the height of lchild and rchild sub-trees */
	  int lheight = height(root.lchild);
	  int rheight = height(root.rchild);
	 
	  /* get the diameter of lchild and rchild sub-trees */
	  int ldiameter = diameter(root.lchild);
	  int rdiameter = diameter(root.rchild);
	 
	  /* Return max of following three
	   1) Diameter of lchild subtree
	   2) Diameter of rchild subtree
	   3) Height of lchild subtree + height of rchild subtree + 1 */
	  return Math.max(lheight + rheight + 1, Math.max(ldiameter, rdiameter));
	} 
		/*
		Time Complexity: O(n^2)
		Space Complexity: O(1)
		*/
