/*Here are the Java solutions to the 14 binary tree problems. 
Source: http://sciencewise.info/resource/Binary_tree_code/cslibrary.stanford.edu
Most of the solutions use two methods:a one-line OOP method that starts the computation, 
and a recursive method that does the real operation. Make an attempt to solve each problem 
before looking at the solution -- it's the best way to learn.

*/


/////******** USEFUL HINTS FOR ALL THE 14 OPERATIONS*****************
In binary trees, the main tool to solve all the problems is recursion. In recursion, in many of the cases below, we have a 
set pattern t solve the problem.

In recursion, we have a BASE CASE -> so that the recursion doesn't continue for infinite loop

The second part is the traversal:
for example in the operation where we need to find the size of the tree. We subdivide the problem so that we calculate 
the size of the left subtree and the size of the right subtree. To go to the left and right, we require an efficient and
proper traversal. Here comes the importance of the 3 traversals 1) Inorder 2) Preorder 3) Postorder.
Hence in the size problem, we have the 2nd part as
int leftsubtree = size(node.left);
int rightsubtree = size(node.right);
This for the 2nd part of recursion. If we see the above traversal, we will easly make out that the above traversal made
is a POSTORDER traversal. Hence traversals are very very important part in learning trees. Also there are cases where 
we will use BFS and DFS raversals. The three traversals Inorder, Prorder, Postorder are nothing but variants of DFS traversals.
A BFS is called as a level-order traversal.

The third part is where the proper answer needs to be returned.
for example, in the case of the size of the tree, the last part(aka CONCLUSION part) is as follows:
return (leftsubtree+1+rightsubtree); // plus 1 is for the parent node

Thus, we can say that most of the recursion problems consists of 3 parts:
INTRO (BASE CASE or a terminating condition which is mostly a return statement)
BODY (TRAVERSAL)
CONCLUSION (PROPER RETURN PART which is mostly a return statement)
/////******** END OF USEFUL HINTS FOR ALL THE 14 OPERATIONS*****************



/* The BEST and the most EFFICIENT program to check whether the given tree is a binary search tree.

The trick is to write a utility helper function isBST(struct node* node, int min, int max) that 
traverses down the tree keeping track of the narrowing min and max allowed values as it goes, looking at 
each node only once. The initial values for min and max should be INT_MIN and INT_MAX â€” they narrow from there.

The Time and Space complexity of the below program is as follows:

Time Complexity: O(n)
Auxiliary Space : O(1) if Function Call Stack size is not considered (I think they mean recursion), otherwise O(n)


Also one more method is where we can do a inorder traversal and store the elements in an array. Now we can check if the array is 
sorted, if yes then the tree is a BST otherwise it is not.
In this, the time complexity will be O(n) [Actually O(n+n), one for inorder and the other 
for searching whether the array is sorted -> which is rounded off to O(n)] and the space complexity
will be O(n) which is the space required by the auxilary array for storing the inorder traversal.

*/


private static boolean isBST(Node current, Comparable min, Comparable max) {
    if (current == null) 
        return true;

    if (min != null && current.value.compareTo(min) > 0)
        return false;

    if (max != null && current.value.compareTo(max) < 0) 
        return false;

    return isBST(current.left, min, current.value) && 
            isBST(current.right, current.value, max);
}

public static boolean isBST(BinarySearchTree tree) {
    return isBST(tree.getRoot(), null, null);
}


1.a. /* Function to get diameter of a binary tree. Time Complexity of this solution is: O(n^2) */
/* Source geeksforgeeks: http://www.geeksforgeeks.org/diameter-of-a-binary-tree/  
and YouTube link: http://www.youtube.com/watch?v=i9nVJDr4HmA                        */


int diameter(struct node * tree)
{
   /* base case where tree is empty */
   if (tree == 0)
     return 0;
 
  /* get the height of left and right sub-trees */
  int lheight = height(tree->left);
  int rheight = height(tree->right);
 
  /* get the diameter of left and right sub-trees */
  int ldiameter = diameter(tree->left);
  int rdiameter = diameter(tree->right);
 
  /* Return max of following three
   1) Diameter of left subtree
   2) Diameter of right subtree
   3) Height of left subtree + height of right subtree + 1 */
  return max(lheight + rheight + 1, max(ldiameter, rdiameter));
} 
 
/* UTILITY FUNCTIONS TO TEST diameter() FUNCTION */
 
/*  The function Compute the "height" of a tree. Height is the 
    number f nodes along the longest path from the root node 
    down to the farthest leaf node.*/
int height(struct node* node)
{
   /* base case tree is empty */
   if(node == NULL)
       return 0;
 
   /* If tree is not empty then height = 1 + max of left 
      height and right heights */   
   return 1 + max(height(node->left), height(node->right));
} 
 
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;
 
  return(node);
}


/*Optimized implementation: The above implementation can be optimized by calculating 
the height in the same recursion rather than calling a height() separately.
This optimization reduces time complexity to O(n). */

/* Time Complexity of this solution is: O(n) */

/*The second parameter is to store the height of tree.
   Initially, we need to pass a pointer to a location with value
   as 0. So, function should be used as follows:
 
   int height = 0;
   struct node *root = SomeFunctionToMakeTree();
   int diameter = diameterOpt(root, &height); */
int diameterOpt(struct node *root, int* height)
{
  /* lh --> Height of left subtree
      rh --> Height of right subtree */
  int lh = 0, rh = 0;
  
  /* ldiameter  --> diameter of left subtree
      rdiameter  --> Diameter of right subtree */
  int ldiameter = 0, rdiameter = 0;
  
  if(root == NULL)
  {
    *height = 0;
     return 0; /* diameter is also 0 */
  }
  
  /* Get the heights of left and right subtrees in lh and rh
    And store the returned values in ldiameter and ldiameter */
  ldiameter = diameterOpt(root->left, &lh);
  rdiameter = diameterOpt(root->right, &rh);
  
  /* Height of current node is max of heights of left and
     right subtrees plus 1*/
  *height = max(lh, rh) + 1;
  
  return max(lh + rh + 1, max(ldiameter, rdiameter));
}


1.b. Build123() Solution (Java)

/** 
 Build 123 using three pointer(root, left, right) variables. 
*/ 
public void build123a() { 
  root = new Node(2); 
  Node lChild = new Node(1); 
  Node rChild = new Node(3);
  root.left = lChild; 
  root.right= rChild; 
}

/** 
 Build 123 using only one pointer(i.e. root variable) variable. 
*/ 
public void build123b() { 
  root = new Node(2); 
  root.left = new Node(1); 
  root.right = new Node(3); 
} 
 

/** 
 Build 123 by calling insert() three times. 
 Note that the '2' must be inserted first. 
*/ 
public void build123c() { 
  root = null; 
  root = insert(root, 2); 
  root = insert(root, 1); 
  root = insert(root, 3); 
} 
 

2. size() Solution (Java)

/** 
 Returns the number of nodes in the tree. 
 Uses a recursive helper that recurs 
 down the tree and counts the nodes. 
*/ 
public int size() { 
  return(size(root)); 
}
private int size(Node node) { 
  if (node == null)
  return(0); 
  else { 
   int ltree=size(node.left);
   int rtree=size(node.right);
   return (ltree+1+rtree);     // The plus one (+1) is for the parent node
  } 
} 
 

3. maxDepth() Solution (Java)

/** 
 Returns the max root-to-leaf depth of the tree. 
 Uses a recursive helper that recurs down to find 
 the max depth. 
*/ 
public int maxDepth() { 
  return(maxDepth(root)); 
}
private int maxDepth(Node node) { 
  if (node==null) { 
    return(0); 
  } 
  else { 
    int lDepth = maxDepth(node.left); 
    int rDepth = maxDepth(node.right);

    // use the larger + 1
    if(lDepth>rDepth)
    return (lDepth+1);       // The plus one (+1) is for the parent node
    else             // Very Important to Note. The else case is for both. That means (lDepth<=rDepth). This case will be executed for both greater than and equal to conditions.
    return (rDepth+1);
  } 
} 
 

4. minValue() Solution (Java)

/** Pre-requsite: The tree is a Binary Search Tree.
 Returns the min value in a non-empty binary search tree. 
 Uses a helper method that iterates to the left to find 
 the min value. 
*/ 
public int minValue() { 
 return( minValue(root) ); 
} 
 
/** 
 Finds the min value in a non-empty binary search tree. 
*/ 
private int minValue(Node node) { 

  if(node==null)
  return ;  // Return 'nothing' because the tree is Empty. Or else, Sopln that the tree is empty and return 'nothing'.

  else{
  Node current = node; 
  while (current.left != null) { 
    current = current.left; 
  }
  return(current.data); 
  }
}

5. printTree() Solution (Java)     // This method is the same as Inorder traversal of a Binary Tree.

/** 
 Prints the node values in the "inorder" order. 
 Uses a recursive helper to do the traversal. 
*/ 
public void printTree() { 
 printTree(root); 
 System.out.println(); 
}
private void printTree(Node node) { 
 if (node == null) return;           // The Tree is an Empty Tree.

 // left, node itself, right                     This method is the same as Inorder traversal of a Binary Tree.
 printTree(node.left); 
 System.out.print(node.data + "  "); 
 printTree(node.right); 
} 
 

6. printPostorder() Solution (Java)

/** 
 Prints the node values in the "postorder" order. 
 Uses a recursive helper to do the traversal. 
*/ 
public void printPostorder() { 
 printPostorder(root); 
 System.out.println(); 
}
public void printPostorder(Node node) { 
  if (node == null) return;     // The tree is empty, hence return 'nothing'.

  // first recur on both subtrees 
  printPostorder(node.left); 
  printPostorder(node.right);

  // then deal with the node 
 System.out.print(node.data + "  "); 
} 
 

7. hasPathSum() Solution (Java)

/** Here in this method, we traverse from the ROOT right upto the LEAF.
 Given a tree and a sum, returns true if there is a path from the root 
 down to a leaf, such that adding up all the values along the path 
 equals the given sum.
 Strategy: subtract the node value from the sum when recurring down, 
 and check to see if the sum is 0 when you run out of tree. 
*/ 
public boolean hasPathSum(int sum) { 
 return( hasPathSum(root, sum) ); 
}

boolean hasPathSum(Node node, int sum) { 
  // return true if we run out of tree and sum==0 
  if (node == null) { 
    return(sum == 0); 
  } 
  else { 
  // otherwise check both subtrees 
    int subSum = sum - node.data;   // Very Important Calculation. This is the main stratergy to solve this problem
    
    boolean ltree=hasPathSum(node.left, subsum);
    boolean rtree=hasPathSum(node.right, subsum);
    
    return (ltree||rtree);   // Even if one of them is true then return true.
  } 
} 
 

8. printPaths() Solution (Java)

/** 
 Given a binary tree, prints out all of its root-to-leaf 
 paths, one per line. Uses a recursive helper to do the work. 
*/ 
public void printPaths() { 
  int[] path = new int[1000]; 
  printPaths(root, path, 0);  //Here Please note that the path[] and the pathlength=0 is initialized.
}
/** 
 Recursive printPaths helper -- given a node, and an array containing 
 the path from the root node up to but not including this node, 
 prints out all the root-leaf paths. 
*/ 
private void printPaths(Node node, int[] path, int pathLen) {   // pathlength=0 and pathlength[1000] both are initialized above. Please see above.
  if (node==null) return;

  // append this node to the path array. This is the gist of the problem. These 2 lines are the stratergy to solve the problem.
  path[pathLen] = node.data; 
  pathLen++;

  // it's a leaf, so print the path that led to here 
  if (node.left==null && node.right==null) { 
    printArray(path, pathLen); 
  } 
  else { 
  // otherwise try both subtrees 
    printPaths(node.left, path, pathLen); 
    printPaths(node.right, path, pathLen); 
  } 
}

/** 
 Utility that prints ints from an array on one line. 
*/ 
private void printArray(int[] ints, int len) { 
  int i; 
  for (i=0; i<len; i++) { 
   System.out.print(ints[i] + " "); 
  } 
  System.out.println(); 
} 
 

9. mirror() Solution (Java)


/** 
 Changes the tree into its mirror image.

 So the tree... 
       4 
      / \ 
     2   5 
    / \ 
   1   3

 is changed to... 
       4 
      / \ 
     5   2 
        / \ 
       3   1

 Uses a recursive helper that recurs over the tree, 
 swapping the left/right pointers. 
*/ 
public void mirror() { 
  mirror(root); 
}

private void mirror(Node node) { 
  if (node != null) { 
    // do the sub-trees 
    mirror(node.left); 
    mirror(node.right);

    // swap the left/right pointers 
    Node temp = node.left; 
    node.left = node.right; 
    node.right = temp; 
  } 
} 
 

10. doubleTree() Solution (Java)

/** 
 Changes the tree by inserting a duplicate node 
 on each nodes's .left. 
  
 
 So the tree... 
    2 
   / \ 
  1   3

 Is changed to... 
       2 
      / \ 
     2   3 
    /   / 
   1   3 
  / 
 1

 Uses a recursive helper to recur over the tree 
 and insert the duplicates. 
*/ 
public void doubleTree() { 
 doubleTree(root); 
}

private void doubleTree(Node node) { 
  Node oldLeft;

  if (node == null) return;

  // do the subtrees 
  doubleTree(node.left); 
  doubleTree(node.right);

  // duplicate this node to its left 
  oldLeft = node.left; 
  node.left = new Node(node.data); 
  node.left.left = oldLeft; 
} 
 

11. sameTree() Solution (Java)

/* 
 Compares the receiver to another tree to 
 see if they are structurally identical. 
*/ 
public boolean sameTree(BinaryTree other) { 
 return( sameTree(root, other.root) ); 
}
/** 
 Recursive helper -- recurs down two trees in parallel, 
 checking to see if they are identical. 
*/ 
boolean sameTree(Node a, Node b) { 
  // 1. both empty -> true 
  if (a==null && b==null) return(true);

  // 2. both non-empty -> compare them 
  else if (a!=null && b!=null) { 
    return( 
      a.data == b.data && 
      sameTree(a.left, b.left) && 
      sameTree(a.right, b.right) 
    ); 
  } 
  // 3. one empty, one not -> false 
  else return(false); 
} 
 

12. countTrees() Solution (Java)

/** 
 For the key values 1...numKeys, how many structurally unique 
 binary search trees are possible that store those keys?
 Strategy: consider that each value could be the root. 
 Recursively find the size of the left and right subtrees. 
*/ 
public static int countTrees(int numKeys) { 
  if (numKeys <=1) { 
    return(1); 
  } 
  else { 
    // there will be one value at the root, with whatever remains 
    // on the left and right each forming their own subtrees. 
    // Iterate through all the values that could be the root... 
    int sum = 0; 
    int left, right, root;

    for (root=1; root<=numKeys; root++) { 
      left = countTrees(root-1); 
      right = countTrees(numKeys - root);

      // number of possible trees with this root == left*right 
      sum += left*right; 
    }

    return(sum); 
  } 
} 
 
 
/*
To find whether a tree is a binary search tree. Please refer the link mentioned below before you go to the code mentioned below:
http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/



The contents of the link are:

A binary search tree (BST) is a node based binary tree data structure which has the following properties.
â€¢ The left subtree of a node contains only nodes with keys less than the nodeâ€™s key.
â€¢ The right subtree of a node contains only nodes with keys greater than the nodeâ€™s key.
â€¢ Both the left and right subtrees must also be binary search trees.

From the above properties it naturally follows that:
â€¢ Each node (item in the tree) has a distinct key.

BST



METHOD 1 (Simple but Wrong)
Following is a simple program. For each node, check if left node of it is smaller than the node and right node of it is greater than the node.

int isBST(struct node* node) 
{ 
  if (node == NULL) 
    return 1; 
     
  /* false if left is > than node */
  if (node->left != NULL && node->left->data > node->data) 
    return 0; 
     
  /* false if right is < than node */
  if (node->right != NULL && node->right->data < node->data) 
    return 0; 
   
  /* false if, recursively, the left or right is not a BST */
  if (!isBST(node->left) || !isBST(node->right)) 
    return 0; 
     
  /* passing all that, it's a BST */
  return 1; 
}
This approach is wrong as this will return true for below binary tree (and below tree is not a BST because 4 is in left subtree of 3)

tree_bst






METHOD 2 (Correct but not efficient)
For each node, check if max value in left subtree is smaller than the node and min value in right subtree greater than the node.

/* Returns true if a binary tree is a binary search tree */
int isBST(struct node* node) 
{ 
  if (node == NULL) 
    return(true); 
     
  /* false if the max of the left is > than us */
  if (node->left!=NULL && maxValue(node->left) > node->data) 
    return(false); 
     
  /* false if the min of the right is <= than us */
  if (node->right!=NULL && minValue(node->right) < node->data) 
    return(false); 
   
  /* false if, recursively, the left or right is not a BST */
  if (!isBST(node->left) || !isBST(node->right)) 
    return(false); 
     
  /* passing all that, it's a BST */
  return(true); 
} 
It is assumed that you have helper functions minValue() and maxValue() that return the min or max int value from a non-empty tree



METHOD 3 (Correct and Efficient)
Method 2 above runs slowly since it traverses over some parts of the tree many times. A better solution looks at each node only once. The trick is to write a utility helper function isBSTUtil(struct node* node, int min, int max) that traverses down the tree keeping track of the narrowing min and max allowed values as it goes, looking at each node only once. The initial values for min and max should be INT_MIN and INT_MAX â€” they narrow from there.

/* Returns true if the given tree is a binary search tree 
 (efficient version). */ 
int isBST(struct node* node) 
{ 
  return(isBSTUtil(node, INT_MIN, INT_MAX)); 
} 

/* Returns true if the given tree is a BST and its 
 values are >= min and <= max. */ 
int isBSTUtil(struct node* node, int min, int max) 
Implementation:

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
 
/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node* left;
    struct node* right;
};
 
int isBSTUtil(struct node* node, int min, int max);
 
/* Returns true if the given tree is a binary search tree 
 (efficient version). */
int isBST(struct node* node) 
{ 
  return(isBSTUtil(node, INT_MIN, INT_MAX)); 
} 
 
/* Returns true if the given tree is a BST and its 
   values are >= min and <= max. */
int isBSTUtil(struct node* node, int min, int max) 
{ 
 
  /* an empty tree is BST */
  if (node==NULL) 
     return 1;
       
  /* false if this node violates the min/max constraint */ 
  if (node->data < min || node->data > max) 
     return 0; 
 
  /* otherwise check the subtrees recursively, 
   tightening the min or max constraint */
  return
    isBSTUtil(node->left, min, node->data-1) &&  // Allow only distinct values
    isBSTUtil(node->right, node->data+1, max);  // Allow only distinct values
} 
 
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node->data = data;
  node->left = NULL;
  node->right = NULL;
 
  return(node);
}
 
/* Driver program to test above functions*/
int main()
{
  struct node *root = newNode(4);
  root->left        = newNode(2);
  root->right       = newNode(5);
  root->left->left  = newNode(1);
  root->left->right = newNode(3); 
 
  if(isBST(root))
    printf("Is BST");
  else
    printf("Not a BST");
     
  getchar();
  return 0;
}  
Time Complexity: O(n)
Auxiliary Space : O(1) if Function Call Stack size is not considered, otherwise O(n)

METHOD 4(Using In-Order Traversal)
Thanks to LJW489 for suggesting this method.
1) Do In-Order Traversal of the given tree and store the result in a temp array.
3) Check if the temp array is sorted in ascending order, if it is, then the tree is BST.

Time Complexity: O(n)

We can avoid the use of Auxiliary Array. While doing In-Order traversal, we can keep track of previously visited node. If the value of the currently visited node is less than the previous value, then tree is not BST. Thanks to ygos for this space optimization.

bool isBST(struct node* root)
{
    static struct node *prev = NULL;
     
    // traverse the tree in inorder fashion and keep track of prev node
    if (root)
    {
        if (!isBST(root->left))
          return false;
 
        // Allows only distinct valued nodes 
        if (prev != NULL && root->data <= prev->data)
          return false;
 
        prev = root;
 
        return isBST(root->right);
    }
 
    return true;
}
The use of static variable can also be avoided by using reference to prev node as a parameter (Similar to this post).

Sources:
http://en.wikipedia.org/wiki/Binary_search_tree
http://cslibrary.stanford.edu/110/BinaryTrees.html


*/

13. isBST1() Solution (Java)

/** 
 Tests if a tree meets the conditions to be a 
 binary search tree (BST). 
*/ 
public boolean isBST() { 
  return(isBST(root)); 
}
/** 
 Recursive helper -- checks if a tree is a BST 
 using minValue() and maxValue() (not efficient). 
*/ 
private boolean isBST(Node node) { 
  if (node==null) return(true);

  // do the subtrees contain values that do not 
  // agree with the node? 
  if (node.left!=null && maxValue(node.left) > node.data) return(false); 
  if (node.right!=null && minValue(node.right) <= node.data) return(false);

  // check that the subtrees themselves are ok 
  return( isBST(node.left) && isBST(node.right) ); 
} 
  
 

14. isBST2() Solution (Java)

/** 
 Tests if a tree meets the conditions to be a 
 binary search tree (BST). Uses the efficient 
 recursive helper. 
*/ 
public boolean isBST2() { 
 return( isBST2(root, Integer.MIN_VALUE, Integer.MAX_VALUE) ); 
}
/** 
  Efficient BST helper -- Given a node, and min and max values, 
  recurs down the tree to verify that it is a BST, and that all 
  its nodes are within the min..max range. Works in O(n) time -- 
  visits each node only once. 
*/ 
private boolean isBST2(Node node, int min, int max) { 
  if (node==null) { 
    return(true); 
  } 
  else { 
   // left should be in range  min...node.data 
    boolean leftOk = isBST2(node.left, min, node.data);

    // if the left is not ok, bail out 
    if (!leftOk) return(false);

    // right should be in range node.data+1..max 
  nbsp; boolean rightOk = isBST2(node.right, node.data+1, max);

    return(rightOk); 
  } 
} 
  
